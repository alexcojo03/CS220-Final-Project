class SnakeGame {
    field Snake player;
    field Pos startPos, fruitPos;
    field int currentDirection, gameSpeed;

    constructor SnakeGame new(int startX, int startY, int startDirection) {
        let startPos = Pos.new(startX, startY);
        let player = Snake.new(startPos, startDirection);
        let currentDirection = startDirection;
        let gameSpeed = 100;

        return this;
    }

    method void updateScore() {
        var int score;
        let score = player.getLength();
        // Top left
        do Output.moveCursor(0,0);
        do Output.printString("Score: ");
        do Output.printInt(score);

        return;
    }

    method void run() {
        // keep track of current key
        var char key;
        var boolean quit;
        // Test grow and shrink of snake by using integer variable
        var int i;

        let i = 0;

        let quit = false;

        // Create a loop, keep playing
        // until user quits
        while (~quit) {
            let i = i + 1;
            let i = Random.modulo(i, 5);
            
            let key = Keyboard.keyPressed();
            // Up arrow
            if (key = 131) { let currentDirection = 0; }
            // Right arrow
            if (key = 132) { let currentDirection = 1; }
            // Down arrow
            if (key = 133) { let currentDirection = 2; }
            // Left arrow
            if (key = 130) { let currentDirection = 3; }

            // Player cant do 180 deg turn
            if (Random.modulo((currentDirection + 2), 4) = player.getDirection()) {
                let currentDirection = player.getDirection();
            }

            do player.setDirection(currentDirection);
            if (player.isOutOfBounds()) {
                return;
            }
            if (player.hitsItself()) {
                return;
            }
            if (i = 0) {
                do player.grow();
            } else {
                do player.move();
            }

            do updateScore();

            do Sys.wait(gameSpeed);
        }
        return;
    }

    method void dispose() {
        do player.dispose();
        do startPos.dispose();
        // do fruitPos.dispose();
        do Memory.deAlloc(this);
        return;
    }
}