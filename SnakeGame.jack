class SnakeGame {
    field Snake player;
    field Pos startPos, fruitPos;
    field Random random;
    field int currentDirection, gameSpeed, score;

    constructor SnakeGame new(int startX, int startY, int startDirection, int startSeed) {
        let startPos = Pos.new(startX, startY);
        let random = Random.new(startSeed);
        let player = Snake.new(startPos, startDirection);
        let currentDirection = startDirection;
        let gameSpeed = 100;
        let score = 0;

        return this;
    }

    method void updateScore() {
        // Top left
        let score = getScore();
        do Output.moveCursor(0,0);
        do Output.printString("Score: ");
        do Output.printInt(score);

        return;
    }

    method void run() {
        // keep track of current key
        var char key;
        
        do updateScore();

        // Create a loop, keep playing
        while (true) {
            let key = Keyboard.keyPressed();
            // Up arrow
            if (key = 131) { let currentDirection = 0; }
            // Right arrow
            if (key = 132) { let currentDirection = 1; }
            // Down arrow
            if (key = 133) { let currentDirection = 2; }
            // Left arrow
            if (key = 130) { let currentDirection = 3; }

            // Player cant do 180 deg turn
            if (Random.modulo((currentDirection + 2), 4) = player.getDirection()) {
                let currentDirection = player.getDirection();
            }

            do player.setDirection(currentDirection);
            if (player.isOutOfBounds() | player.hitsItself()) {
                return;
            }
            if (playerEatsApple()) {
                do player.grow();
                // delete old fruit position
                do fruitPos.dispose();
                // create a new fruit
                do generateNewFruit();
                do updateScore();
            } else {
                do player.move();
            }

            do Sys.wait(gameSpeed);
        }
        return;
    }

    // Dispose of all methods to make sure game works
    method void dispose() {
        do player.dispose();
        do startPos.dispose();
        do fruitPos.dispose();
        do Memory.deAlloc(this);
        do Memory.deAlloc(random);
        return;
    }
    
    // Check if player intersect with an apple
    method boolean playerEatsApple() {
        var Pos head;
        let head = player.getHeadPosition();
        return head.equals(fruitPos);
    }

    method void generateNewFruit() {
        // generate a new fruit
        // using random and making sure it doesn't intersect with the player
        var int randX, randY;
        let randX = random.randInt(32);
        let randY = random.randInt(16);
        // Positions should be at multiples of 16 to align with the snake
        let fruitPos = Pos.new(Math.multiply(randX, 16), Math.multiply(randY, 16));
        // Make sure new fruit is not generated inside of the snake
        while(player.containsSegment(fruitPos)) {
            do fruitPos.dispose();
            let randX = random.randInt(32);
            let randY = random.randInt(16);
            let fruitPos = Pos.new(Math.multiply(randX, 16), Math.multiply(randY, 16));
        }

        do Screen.setColor(true);
        do Screen.drawRectangle(fruitPos.getX(), fruitPos.getY(), fruitPos.getX() + 15, fruitPos.getY() + 15);

        return;
    }

    method int getScore() {
        return player.getLength();
    }

}